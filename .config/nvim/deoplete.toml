[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
let g:deoplete#enable_at_startup = 1
let g:deoplete#auto_complete_start_length = 1
'''

[[plugins]]
repo = 'Shougo/neosnippet'
on_i = 1
hook_add = '''

let g:neosnippet#snippets_directory = '~/.config/nvim/snippets/'
"neosnippet用のキーマップ
" Plugin key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
"imap <C-k>     <Plug>(neosnippet_expand_or_jump)
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
"smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
"\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'itchyny/lightline.vim'
on_i = 1
hook_add = '''
" START: settings for lightline ------------------------------------------
if !has('gui_runnig')
	set t_Co=256
endif
let g:lightline = {
\   'colorscheme': 'wombat',
\   'separator': {'left': "\ue0b0", 'right': "\ue0b2"},
\   'subseparator': {'left': "\ue0b1", 'right': "\ue0b3"}
\}
" END: settings for lightline --------------------------------------------
'''

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = ['bash install.sh']
depends = ['deoplete.nvim']
hook_add = '''
set hidden
let g:LanguageClient_serverCommands = {
    \ 'cpp': ['cquery', '--log-file=/tmp/cq.log', '--init={"cacheDirectory" : "/tmp/cquery/"}'],
    \ 'c': ['cquery', '--log-file=/tmp/cq.log', '--init={"cacheDirectory" : "/tmp/cquery/"}'],
"    \ 'cpp': ['ccls', '--log-file=/tmp/cc.log',
"    \                 '--init={
"    \                           "cache.directory" : "/tmp/ccls-cache/",
"    \                           "client.snippetSupport" : "false"
"    \                         }'
"    \        ],
"    \ 'c': ['ccls', '--log-file=/tmp/cc.log',
"    \               '--init={
"    \                         "cache.directory" : "/tmp/ccls-cache/",
"    \                         "client.snippetSupport" : "false"
"    \                       }'
"    \      ],
"    \ 'c': ['clangd'],
"    \ 'cpp': ['clangd'],
    \ }

"call deoplete#custom#source('LanguageClient',
"                          \ 'min_pattern_length',
"                          \ 1)

nnoremap <F5> :call LanguageClient_contextMenu()<CR>
" Or map each action separately
nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
'''

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'rhysd/vim-clang-format'
